[language-server.lua-language-server.config]
Lua = { telemetry = { enable = true } }

[language-server.yaml-language-server.config]
redhat = { telemetry = { enabled = false } }
yaml = { keyOrdering = false, format = { enable = true } }

[language-server.nixd]
command = "nixd"

[language-server.typos]
command = "typos-lsp"
# config.config = "~/code/typos-lsp/crates/typos-lsp/tests/typos.toml"
config.diagnosticSeverity = "Hint"

[language-server.nixd.config]
diagnostic = { suppress = ["sema-def-not-used", "sema-escaping-with", "var-bind-to-this", "escaping-this-with"] }

[language-server.biome]
command = "biome"
args = ["lsp-proxy"]

[language-server.rust-analyzer.config]
imports = { granularity = { group = "module" }, prefix = "self" }
cargo = { allFeatures = true, targetDir = true, buildScripts = { enable = true }, loadOutDirsFromCheck = true, runBuildScripts = true }
check = { command = "clippy", allTargets = false }
procMacro = { enable = true, ignored = { leptos_macro = ["server"] } }
rustfmt = { overrideCommand = ["leptosfmt", "--stdin", "--rustfmt"] }

# [language-server.rust-analyzer.config.inlayHints]
# lifetimeElisionHints = { enable = false, useParameterNames = false }
# renderColons = { enable = false }
# typeHints = { hideNamedConstructor = true, hideClosureInitialization = true }
# chainingHints = { enable = false }
# closingBraceHints = { enable = false }
# hideClosureInitialization = { enabla = true }
# hideNamedConstructor = { enable = true }

[language-server.tailwindcss]
name = "tailwindcss"
command = "tailwindcss-language-server"
args = ["--stdio"]

[language-server.nu]
name = "nu-lsp"
command = "nu"
args = ["--lsp"]

[language-server.neocmakelsp]
command = "neocmakelsp"
args = ["--stdio"]

[language-server.asm-lsp]
command = "asm-lsp"

[language-server.tinymist]
command = "tinymist"
args = ["lsp"]

[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]

[language-server.ruff]
command = "ruff"
args = ["server --preview"]


[[language]]
name = "nix"
indent = { tab-width = 2, unit = "  " }
auto-format = true
formatter = { command = "nixfmt", args = ["--quiet"] }
language-servers = ["nixd"]

[[language]]
name = "javascript"
auto-format = true
language-servers = ["javascript-language-server", "biome"]
formatter = { command = "biome", args = ["format", "--stdin-file-path=x.js"] }

[[language]]
name = "typescript"
auto-format = true
formatter = { command = "biome", args = ["format", "--stdin-file-path=x.ts"] }
language-servers = ["typescript-language-server", "biome"]

[[language]]
name = "jsx"
auto-format = true
language-servers = ["typescript-language-server", "biome"]
formatter = { command = "biome", args = ["format", "--stdin-file-path=x.jsx"] }

[[language]]
name = "json"
auto-format = true
language-servers = ["vscode-json-language-server", "biome"]
formatter = { command = "biome", args = ["format", "--stdin-file-path=x.json"] }

[[language]]
name = "nu"
language-servers = ["nu-lsp"]

[[language]]
name = "html"
language-servers = ["vscode-html-language-server", "tailwindcss"]

[[language]]
name = "css"
language-servers = ["vscode-css-language-server", "tailwindcss"]

[[language]]
name = "cmake"
auto-format = true
language-servers = ["neocmakelsp"]

[[language]]
name = "asm"
scope = "source.asm"
language-servers = ["asm-lsp"]
file-types = ["s", "asm"]
roots = [".git"]
injection-regex = "asm"
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "typst"
language-servers = ["tinymist"]

[[language]]
name = "lua"
formatter = { command = "stylua", args = ["-"] }

[[language]]
name = "python"
formatter = { command = "ruff", args = ["format", "-"] }
language-servers = ["ruff", "basedpyright"]

[[language]]
name = "rust"
language-servers = ["rust-analyzer", "typos"]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'

